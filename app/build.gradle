apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
def enableProguardInReleaseBuilds = true

project.ext.react = [
		entryFile: "index.js",
		enableHermes: false,  // clean and rebuild if changing
]

android {
	compileSdkVersion 29
	buildToolsVersion '28.0.3'

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}

	defaultConfig {
		applicationId 'org.openobservatory.ooniprobe'
		minSdkVersion 17
		multiDexEnabled true
		targetSdkVersion 29
		versionName '2.2.1-alpha01'
		versionCode 55
		testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
	}

	buildTypes {
		debug {
			buildConfigField 'String', 'NOTIFICATION_SERVER', '"https://registry.proteus.test.ooni.io"'
			buildConfigField 'String', 'OONI_ORCHESTRATE_BASE_URL', '"https://orchestrate.ooni.io/"'
			buildConfigField 'String', 'OONI_API_BASE_URL', '"https://api.ooni.io/"'
		}

		release {
			minifyEnabled enableProguardInReleaseBuilds
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
			buildConfigField 'String', 'NOTIFICATION_SERVER', '"https://registry.proteus.ooni.io"'
			buildConfigField 'String', 'OONI_ORCHESTRATE_BASE_URL', '"https://orchestrate.ooni.io/"'
			buildConfigField 'String', 'OONI_API_BASE_URL', '"https://api.ooni.io/"'
		}
	}

	flavorDimensions 'license'
	productFlavors {
		fdroid { dimension 'license' }
		full { dimension 'license' }
	}

	//Remove to disable splitted APKs
	splits {
		// Configures multiple APKs based on ABI.
		abi {

			// Enables building multiple APKs per ABI.
			enable true

			// By default all ABIs are included, so use reset() and include to specify that we only
			// want APKs for x86 and x86_64.

			// Resets the list of ABIs that Gradle should create APKs for to none.
			reset()

			// Specifies a list of ABIs that Gradle should create APKs for.
			include "x86", "armeabi-v7a", "arm64-v8a", "x86_64"

			// Specifies that we do not want to also generate a universal APK that includes all ABIs.
			universalApk false
		}
	}

}

dependencies {
	implementation 'androidx.appcompat:appcompat:1.1.0'

	implementation 'androidx.multidex:multidex:2.0.1'

	fullImplementation 'com.google.firebase:firebase-messaging:20.0.0'
	fullImplementation 'com.google.firebase:firebase-core:17.2.0'

	annotationProcessor 'com.github.Raizlabs.DBFlow:dbflow-processor:4.2.4'
	implementation 'com.github.Raizlabs.DBFlow:dbflow-core:4.2.4'
	implementation 'com.github.Raizlabs.DBFlow:dbflow:4.2.4'

	implementation 'com.squareup.retrofit2:retrofit:2.6.0'
	implementation 'com.squareup.retrofit2:converter-gson:2.6.0'
	implementation 'com.squareup.okhttp3:logging-interceptor:4.0.1'

	implementation 'com.jakewharton:butterknife:10.1.0'
	annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0'

	fullImplementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'
	implementation 'org.openobservatory.measurement_kit:android-libs:0.10.6-android.1'
	implementation 'com.github.xanscale.LocalhostToolkit:app:19.05.01'
	implementation 'pub.devrel:easypermissions:3.0.0'
	implementation 'com.airbnb.android:lottie:3.0.7'
	implementation 'com.google.code.gson:gson:2.8.5'
	implementation 'ru.noties:markwon:2.0.1'
	implementation 'commons-io:commons-io:2.6'

	implementation "com.facebook.react:react-native:+" // From node_modules
	implementation "org.webkit:android-jsc:+"

	androidTestImplementation 'androidx.test:runner:1.2.0'
	androidTestImplementation 'androidx.test:rules:1.2.0'
}

apply plugin: 'com.google.gms.google-services'
